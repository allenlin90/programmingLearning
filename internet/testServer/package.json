{
  "name": "internet",
  "version": "1.0.0",
  "description": "[HTTP](#HTTP) 1. [HTTP Crash Course & Exploration](https://youtu.be/iYM2zFP3Zn0) --- # HTTP - Reference      1. [HTTP Crash Course & Exploration](https://youtu.be/iYM2zFP3Zn0) 1. What is HTTP?     1. HTTP stands for Hyper Text Transfer Protocol     1. Communication between web servers and clients      1. HTTP Requests/Responses     1. Loading pages, form submit, AJAX calls 1. HTTP is stateless      1. Every request is completely independant. It means that each request won't affect to each other.     1. The concept is similar to transactions.      1. Programming, Local Storage, Cookies, Sessions are used to create enhanced user experience.  1. What is HTTPS?     1. Hyper Text Transfer Protocol Secure     1. Data sent is encrypted      1. SSL (secure sockets layer) / TLS (transport layer security)     1. HTTPS is enabled by installing certificate on web host 1. HTTP methods      1. GET - Retrieve data from the server      1. POST - Submit data to the server     1. PUT - Update data already on the server      1. DELETE - Deletes data from the server      1. Though there are other methods, the 4 methods above are the most common ones. 1. HTTP header fields - 3 main general sections `General`, `Response` and `Request`     1. General          1. Request URL         1. Request Method         1. Status Code          1. Remote Address         1. Referrer Policy     1. Response         1. Server         1. Set-Cookie         1. Content-Type         1. Content-Length         1. Date     1. Request          1. Cookies         1. Accept-xxx         1. Content-Type         1. Content-Length         1. Authorization         1. User-Agent         1. Referrer     <img src=\"./images/httpHeaderFields.PNG\"> 1. HTTP status codes      1. 1xx: Informational - Request recieved / processing     1. 2xx: Success - Successfully recieved, understood and accepted     1. 3xx: Redirect - Further action must be taken / redirect         1. 4xx: Client Error - Request does not have waht it needs     1. 5xx: Server Error - Server failed to fulfillan apparent valid request  1. When visiting a website, we can check the connection between server and browser (client). We can open developer console (such as in Chrome browser) and check \"**network**\" tab for the different types of data and files that use browser to \"**request**\" to the server. Besides, we can check the header fields by clicking a document returned from the server.  1. In addition, we can use POSTMAN to send different types of HTTP request. We can use the check the `body` content, `preview` as if the data is HTML or other types of media such as image. Besides, we can also configure and send other metadata such as `parameters`, `authorization`, `headers`, and `body`.",
  "main": "app.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "dependencies": {
    "express": "^4.17.1"
  }
}
